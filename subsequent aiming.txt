readerobj = VideoReader('a.avi', 'tag', 'arena');  %reading video from folder
lastframe=read(readerobj, get(readerobj,'NumberOfFrames') );
secondlast=read(readerobj,get(readerobj,'NumberOfFrames')-5) ;
firstframe=read(readerobj,1);

radius=17 ;width=10;                                                      % to get the middle two values of x coordintes which will be used in reflection later
leftb=10 ;
rightb=792;                                                    % taking x coordinated of left boundary and right boundary 
lengthofarena=800 ;
ratio=1; 

paddleT=imread('paddleT.png');                                 % templates
ballT=imread('ballT.png');
b=imread('brickT.png');

cc=normxcorr2(paddleT(:,:,1),lastframe(:,:,1));
[m,location]=max(abs(cc(:)));
[y,x]=ind2sub(size(cc),location);
paddletop=y-36;
paddlecenter=x-68;


cc1=normxcorr2(ballT(:,:,2),lastframe(:,:,2));
cc2=normxcorr2(ballT(:,:,2),secondlast(:,:,2));
[m1,location1]=max(abs(cc1(:)));
[y1,x1]=ind2sub(size(cc1),location1);
[m2,location2]=max(abs(cc2(:)));
[y2,x2]=ind2sub(size(cc2),location2);
c1x=x1-20;c1y=y1-17;
c2x=x2-20;c2y=y2-17;

b_direction=(y2-y1)/(x2-x1);
effL=lengthofarena-2*(radius+width); 


if b_direction<0
	b_direction=abs(b_direction);
	c1x=lengthofarena-c1x;
	finaly=paddletop-radius;
	finalx=(finaly-c1y)/b_direction+ c1x- (radius+width);
	n=finalx/effL;n=floor(n);
	R=rem(finalx,effL);
	
	if(rem(n,2)==0)
		new_pos=lengthofarena-(radius+width)-R;
		
	else
		new_pos=(radius+width)+R;
	end
	
end 

if b_direction>0

	finaly=paddletop-radius;
	finalx=(finaly-c1y)/b_direction+ c1x- (radius+width);
	n=finalx/effL;n=floor(n);
	R=rem(finalx,effL);
	
	
	if(rem(n,2)==0)
		new_pos=(radius+width)+R;
	else
		new_pos=lengthofarena-(radius+width)-R;
	end
			
end


                                      %% brick detection starts

yspan=40;xspan=68;

diff_im = imsubtract(b(:,:,3), rgb2gray(b));
    diff_im=medfilt2(diff_im,[3 3]);
    diff_im=im2bw(diff_im,0.1);
    diff_im=bwareaopen(diff_im,50);                            
    bw5=bwlabel(diff_im,8);

    bound=lastframe ;                        
    diff_im = imsubtract(bound(:,:,1), rgb2gray(bound));
    diff_im=medfilt2(diff_im,[3 3]);
    diff_im=im2bw(diff_im,0.1);
    diff_im=bwareaopen(diff_im,50);                            
    bw1=bwlabel(diff_im,8);
                                 
    diff_im = imsubtract(bound(:,:,2), rgb2gray(bound));
    diff_im=medfilt2(diff_im,[3 3]);
    diff_im=im2bw(diff_im,0.1);
    diff_im=bwareaopen(diff_im,50);                            
    bw2=bwlabel(diff_im,8);
                                    
    diff_im = imsubtract(bound(:,:,3), rgb2gray(bound));
    diff_im=medfilt2(diff_im,[3 3]);
    diff_im=im2bw(diff_im,0.1);
    diff_im=bwareaopen(diff_im,50);                            
    bw3=bwlabel(diff_im,8);

bw4=bw1+bw2+bw3;        %bw4 is the image containg all elements in the image in white form
cc5=normxcorr2(bw5(:,:,1),bw4(:,:,1));
I=find(cc5 > 0.999 ) ;
[yb,xb]=ind2sub(size(cc5),I);
yb=yb-10-yspan/2;xb=xb-13-xspan/2;                               %%brick detection ends


                      %% brick aiming starts 
paddlex=new_pos;paddley=paddletop;

xbs=sort(xb);
ybs=sort(yb);
if b_direction>0            %%ball coming from left
						%target left bottom brick
	
i=1;y_xmin=[];
for x=xb
	if  x==xbs(1) 
	y_xmin=[y_xmin,i];
	end
i=i+1;
end
max=0;
for j=i;
	if(yb(j)>=max)
	max=yb(j);
	end
end
targetbx=xbs(1);
targetby=max;
aim_angle=atan(( paddley-targetby-radius) /(paddlex-targetbx-radius)) ;
rotation=1.57-(aim_angle+atan(b_direction))/2; %%anticlockwise from horizontal in rad
end

if b_direction<0                  %%ball coming from right 
							   %%target right bottom brick
  b_direction=abs(b_direction);
  targetbx=xbs(1);
  targetby=ybs(1);
  aim_angle=atan(abs( (paddley-targetby-radius) /(paddlex-targetbx-radius))) ;
  rotation=1.57-(aim_angle+atan(b_direction))/2; %%clockwise from horizontal in rad
  
end       
				 %% brick aiming ends here

				 
fwrite(a,'1');                                   % command to motor
pause(2.0);
distance=fread(a);
distance_moved=(new_pos-paddlecentre)*ratio;
if distance_moved>0
	ard.digitalwrite(2,1);
	ard.digitalwrite(3,0);
end 

if distance_moved>0
	ard.digitalwrite(3,1);
	ard.digitalwrite(2,0);
end                         % command to motor ends
